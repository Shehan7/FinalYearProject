# -*- coding: utf-8 -*-
"""Test03 Using Saved Model 2-06 WORKED .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tweEfwrp4AUAcGMtkcKsJfTKldpeY56-
"""

!pip install tensorflow==2.5

from tensorflow import keras

import keras

import pandas as pd
import numpy as np

#dataset = pd.read_csv("/content/drive/MyDrive/dataset/new/m1.csv")
dataset = pd.read_csv("/content/drive/MyDrive/dataset/predictData2.csv")
#dataset = pd.read_csv("/content/drive/MyDrive/dataset/new/final.csv")

dataset

columns = list(dataset)
features = columns
#features.remove('label')
features.remove('ip.src')
features.remove('ip.dst')
#features.remove('tcp.flags')
#features.remove('label')

features

dataset.replace([np.inf, -np.inf], np.nan, inplace=True)
dataset.fillna(dataset.mean(), inplace=True)

dataset

X = dataset[features].values

y = dataset.iloc[:, -9].values

y

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_Scaled = sc.fit_transform(X)

#lstm1 = keras.models.load_model('/content/drive/MyDrive/dataset/new/finalmodelLSTM2.h5')
#lstm2 = keras.models.load_model('/content/drive/MyDrive/dataset/new/LSTM3_1-26.h5')
lstm3 = keras.models.load_model('/content/drive/MyDrive/dataset/new/LSTMwithoutFlags.h5')
#GRU1 = keras.models.load_model('/content/drive/MyDrive/dataset/new/GRUwithoutFlag.h5')

"""Array reshape to 3D"""

#create dataset for LSTM
def create_dataset(X,Y,look_back=1):
	dataX, dataY = [], []
	for i in range(len(X)-look_back-1):
		a = X[i:(i+look_back)+1, :]
		dataX.append(a)
		dataY.append(Y[i + look_back, 0])
	return np.array(dataX), np.array(dataY)

y = y.reshape((len(y), 1))

# X_series, Y = create_dataset(X_Scaled,y, look_back = 30)
X_series, Y = create_dataset(X_Scaled,y, look_back = 30)

"""#Get Ip src to an array"""

ipSrc = dataset['ip.src'].values

dataset

"""#Predict using trained model"""

prediction = lstm3.predict(X_series)

#counting how many malicious packets in the dataset
count = 0
for i in range (2053):
  if prediction[i] == 1:
    count = count + 1
print(count)

for i in range (1700):
  if prediction[i] == 1:
    #print("this ip blocked: ", ipSrc[i])
    print("iptables -A INPUT -i eth0 -s %s -j DROP" % (ipSrc[i]))
    #print("iptables -A INPUT -i eth0 -s %s -j DROP" % i)

ips = []
for i in range (1700):
  if prediction[i] == 1:
    ips.append(ipSrc[i])

    
    #print("this ip blocked: ", ipSrc[i])
    #print("iptables -A INPUT -i eth0 -s %s -j DROP" % (ipSrc[i]))

ipsNew = list(dict.fromkeys(ips))

len(ipsNew)

for i in range (len(ipsNew)):
  print("iptables -A INPUT -i eth0 -s %s -j DROP" % (ipsNew[i]))
  #subprocess.run(["sudo","iptables", "-A", "INPUT", "-i", "eth0", "-s", ipsNew[i], "-j", "DROP" ])
